// robinhood-1
// glemasters
// updated 4 Sept 2017


void setup() {

/*
Note that in this example, I've put all of 
my code inside the SETUP() function. 
How can you tell? Because the opening 
curly brace (just above) is not closed 
until after the last line of code. 
That doesn't make a lot of sense, 
but it works just fine. As with 
everything in computer programming, 
there are at least a dozen other 
ways to do it. In this case, since 
we don't need any animation, and we 
don't need any interaction with humans, 
and we aren't downloading data from 
the web, sticking everything 
inside SETUP() is OK.
*/

size(500, 800);
/*
As a rule, always make the size() function
the first thing you call inside the setup()
function.
*/

// Here's a challenging line of code.  
// Let's talk about it.

color a = color(#0A97D6);

/*
So:  This part is tricky for a number of
reasons.  We haven't talked about any of
these issues yet, so just make sense of things
as you can, and trust we'll get to them
soon.  For now, let's take things 
one word at a time.

color a;

This tells the computer that the variable
called "a" is going to be a color.  We
could also say any of the following:

int a;
float a;
PImage a;
PVector a;
String a;

These commands would tell the computer that
"a" would always be an integer (whole number),
a float (floating-point number), an image,
a Vector (2-dimensional point on a grid), or
a String (text).  This is a process called
"typing" (as in "what type of data are you
storing in this variable?").  
Various computer languages deal with
typing in different ways.  The more programming
you do, the more you'll develop a preference
for languages that "strongly type" variables
and languages that are untyped.

Now here's the tricky part.  When I typed
"color a", I was "typing" the variable "a",
and telling the computer to set aside memory
for that variable that can store color info.

So why repeat the word color?

So why would I say color a = color (#hexcode)?
'Cause "#hexcode" isn't a variable, right?  it is
a value (an amount), not a place to store values.

The confusion comes from the fact that the
computer looks at the word "color" and interprets
it based on CONTEXT.  Normally -- 95% of the time --
the computer is TERRIBLE at UNDERSTANDING CONTEXT.
Human beings do CONTEXT -- not computers.  For example,
when I ask you "What's up, amiga?" -- as I am prone
to do -- you know that (1) I'm not really asking for info
about the grammatical function of the word "up"; and
(2) I'm not trying to engage you in a conversation
in Spanish.  What's more (3) you know I probably don't
care "what's up," I'm just being friendly.  That's
CONTEXT.  We're great at it.  Computers? Not so much.

Well, normally not so much.  But in this case, 
yes, the computer does understand some context:
it can see that the parentheses immediately after
the word color make a world of difference:

1.  No Parentheses:  a TYPE to assign to a variable 
(a variable is basically a container to hold one or
more values; by creating a variable with a specific
type, we're shaping that container so that it can
only hold certain things.
Example:

color myColor;
int myInteger;
String firstName;
int graduationYear;

If I say:
int graduationYear;

the computer sets aside some space to store 
the value of graduationYear.  The following
will make the computer happy:

graduationYear = 0;
graduationYear = 1998;
graduationYear = 2030-12;

But since it is an int, the following will
cause show-stopping errors.

graduationYear = 1999.5;
graduationYear = 1990+(4 * 0.5);
graduationYear = 4021 / 2;

2.  Parentheses -- a function! always a function.
For example:
print(int(3.14159)) displays:
3

OR:
print(float(3)) displays:
3.0

int() is a function that changes a thing into
an integer (you'll use it a lot).  float() is 
a function to change a thing into a floating-point.
There are many others; those are the easiest
to understand.

In this case, the function COLOR() "mixes up
some paint" and gives it back to you.  So

color a = color(#FFFFFF);

means "Mix up white paint and store it in
a color-typed variable called "a."

For what its worth:  Functions always use parentheses,
because they are tiny programs:  They
do work for you, and then they RETURN their results.

The function

color(#AAFF30)

"RETURNS" or gives back a result -- a specific color.

The function

abs(-32.99)

"RETURNS" or gives back the floating point value +32.99

The function

round(-32.99)

returns the value -33.

SINCE WE KNOW THE COMPUTER IS DOING WORK FOR US, AND
SINCE WE KNOW WE'RE GOING TO GET A RESULT, we always
need to tell the computer what to do with that answer.

That's why we use these variables.

int a = round(100.3);

would put the value 100 into the integer a.

float a = round(100.4);

would put the value 100.0 into the floating-point a.
(There's some weirdness there, but we'll deal with it later.)

OK.  Enough for now.

*/

// color a appears above...
color b = color(#87A541);
color c = color(#F2C979);
color d = color(#F38A30);
color e = color(#C15033);
color f = color(#FFFFFF);

background(b);

fill(f);
ellipse(width/2, height/2, 360, 360);

fill(c);
ellipse(width/2, height/2, 300, 300);

fill(a);
ellipse(width/2, height/2, 230, 230);

fill(f);
ellipse(width/2, height/2, 150, 150);

fill(e);
ellipse(width/2, height/2, 75, 75);
}
